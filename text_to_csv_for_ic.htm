<!DOCTYPE html>

<html>

<head>

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<link rel="stylesheet" href="./css/normalize.css">

<link rel="stylesheet" href="./css/stylize.css">

<title>Text-to-CSV for IC</title>

</head>

<body>

<script src="./js/babel.js"></script>
<script src="./js/react.development.js"></script>
<script src="./js/react-dom.development.js"> </script>

  <h1>RTF-to-CSV for IC</h1>
    <h2><strong>How this works</strong></h2>

    1. Input the CSV template that the data is to be fit into, or leave it as the default as of 2023 (note: if you make changes, the header names must match the default).   
    <br><br>

    2. Select the file(s) via "Browse..." that are to be fit into it.
    <br><br>

    3. The CSV will be automatically downloaded.

    <br><br>

    <strong>Privacy notice:</strong> all data processing is done solely on the computer running this <em>intentionally offline</em> website, via client-side Javascript engines available as part of any modern web browser.
    <br><br>

    <em>Javascript by Thomas. Framework by React.js v18.2.</em>
    <br><br><br>

    <div id="root"> </div>

<script type="text/babel">
  
  const { useState, useEffect } = React;

  function csv_to_obj(csv_header) {

      const obj_template = {};

      csv_header.split(',').map(
	  (field_name) => obj_template[field_name] = ""      )

      return obj_template;

  };

  function format_objs(input_csv, data_as_objs) {

      const csv_header_arr = input_csv.split(",");
      
      console.log(data_as_objs);

      const final_output = new Array(data_as_objs.length + 1);

      final_output[0] = input_csv;

      data_as_objs.map( (obj, index_a) => {

	  const new_row = new Array(csv_header_arr.length);
	  
	  csv_header_arr.map( (header, index_b) => {

	      new_row[index_b] = obj[header];

	  })


	  final_output[index_a + 1] = new_row.join(",");

      });

      console.log(final_output);
      
      return final_output.join("\n");

  };

  function convert_rtf_to_plain_text(rtf) {
      
      console.log(rtf);
  
      rtf = rtf.replace(/\\par[d]?/g, "");

      console.log(rtf);
  
      // rtf = rtf.replace(/\{\*?\\[^{}]+}|[{}]|\\\n?[A-Za-z]+\n?(?:-?\d+)?[ ]?/g, "").trim();

      console.log(rtf);

      return rtf;
      
  };

  function extract_data(obj_template, text_data) {

      return true;

  };

  function process_data(loaded_files, store_processed_data) {

      const cleaned_data_arr = new Array(loaded_files.length);

      console.log("process data #1", loaded_files);

      console.log(["test"]);

      // loaded_files.map( () => console.log("hello") );

      // loaded_files.map( (data, index) => {
	
      // 	  console.log("iter");

      // 	  cleaned_data_arr[index] = data;
      // 	  // convert_rtf_to_plain_text(data);

      // });

      // console.log("process data #2", cleaned_data_arr);

      // const data_as_objs = new Array(loaded_files.length);

      // // cleaned_data_arr.map( (data, index) => {

      // // 	  data_as_objs[index] = extract_data(obj_template, data);

      // // })

      // console.log(data_as_objs);

      // return data_as_objs;

  };
      
  function File_upload( {preloaded_files, store_preloaded_files, loaded_files, store_loaded_files} ) {

      //  https://blog.logrocket.com/using-filereader-api-preview-images-react/

      function handle_change(event) {

	  store_preloaded_files(Array.from(event.target.files));

      };

      useEffect(() => {

	  console.log("preloaded_files", preloaded_files);

	  const open_files = new Array(preloaded_files.length);

	  const fileReaders = new Array(preloaded_files.length);

	  if (preloaded_files.length) {
	      
	      preloaded_files.forEach((file, index) => {
		  
		  fileReaders[index] = new FileReader();

		  //  .onload is called when the file is finished reading
		  
		  fileReaders[index].onload = (e) => {
		      
		      const { result } = e.target;
		      
		      if (result) {
			  
			  open_files[index] = result;

		      }

		      const all_loaded = fileReaders.every( function (fileReader) {

			  return fileReader.readyState === 2;

		      });

		      console.log(all_loaded);

		      if (all_loaded === true) {

			  console.log("open_files", open_files);
			  
			  store_loaded_files(open_files);
			  
		      }
			  
		  }

		  //  .readAsText() initiates the file reading
		  
		  fileReaders[index].readAsText(file);
		  
	      })
	      
	  };
	  
      }, [preloaded_files]);

      return(
	      <div>
	      <input type="file" onChange={(event) => handle_change(event)} multiple/> 
	      </div>
      )
      
  };

  const App = function Main() {

      const [csv_header, set_csv_header] = useState(
          'forename,surname,dob,phone_a,phone_b,address,postcode,source');

      const [preloaded_files, store_preloaded_files] = useState([]);

      const [loaded_files, store_loaded_files] = useState([]);

      const [processed_data, store_processed_data] = useState([]);

      useEffect(() => {

	  console.log("loaded_files changed", loaded_files);

	  process_data(loaded_files, store_processed_data)

      }, [loaded_files]);

      // useEffect(() => {

      // 	  console.log("useEffect #2", processed_data);

      // }, [processed_data]);

      return (
	  <>
	  
              <textarea className='short' name='csv_header' defaultValue={csv_header} onChange={event => set_csv_header(event.target.value)} ></textarea>
              <br/>

	      <File_upload preloaded_files={preloaded_files} store_preloaded_files={store_preloaded_files} loaded_files={loaded_files} store_loaded_files={store_loaded_files} />

	  </>
      )

  };
      
  const root = ReactDOM.createRoot(document.getElementById('root'));
  
  root.render(
	  <App />
  );


</script>
  
  
</body>

</html>
